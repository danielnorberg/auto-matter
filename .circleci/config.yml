version: 2.1

jobs:
  build:
    docker:
      - image: cimg/openjdk:11.0.12
    steps:
      - checkout
      # Cache deps
      - restore_cache:
          keys:
            - maven-repo-v3-{{ .Branch }}-{{ checksum "pom.xml" }}
            - maven-repo-v3-{{ .Branch }}-
            - maven-repo-v3-
      - run: ./mvnw -B -V dependency:go-offline
      - run: ./mvnw -B -V clean package -DskipTests -Dgpg.skip=true -Dmaven.javadoc.skip=true
      - save_cache:
          paths:
            - ~/.m2
          key: maven-repo-v3-{{ .Branch }}-{{ checksum "pom.xml" }}
      # Build and install artifacts
      - run: ./mvnw -B -V clean install -DskipTests -Dgpg.skip=true -Dmaven.javadoc.skip=true
      - persist_to_workspace:
          root: .
          paths:
            - ./*

  test-release:
    docker:
      - image: cimg/openjdk:11.0.12
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-repo-v3-{{ .Branch }}-{{ checksum "pom.xml" }}
            - maven-repo-v3-{{ .Branch }}-
            - maven-repo-v3-
      - run: |
          export PROJECT_VERSION=$(mvn -q \
            -Dexec.executable=echo \
            -Dexec.args='${project.version}' \
            --non-recursive \
            exec:exec)
          if [[ ! "$PROJECT_VERSION" =~ "SNAPSHOT" ]]; then
            echo "Omitting release test for non-SNAPSHOT version build: $PROJECT_VERSION"
          else
            ./mvnw -B -V -DdryRun=true release:prepare -Darguments="-Dgpg.skip=true -DskipTests"
            ./mvnw -B -V -DdryRun=true release:perform -Darguments="-Dgpg.skip=true -DskipTests"
          fi

  test-jdk-template:
    docker:
      - image: dummy      
    steps: &test-jdk-steps
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - maven-repo-v3-{{ .Branch }}-{{ checksum "pom.xml" }}
            - maven-repo-v3-{{ .Branch }}-
            - maven-repo-v3-
      # Install artifacts without re-compiling
      - run: ./mvnw -B -V install -Dgpg.skip=true -Dmaven.javadoc.skip=true -Dmaven.main.skip=true -Dmaven.test.skip=true -Dfmt.skip=true
      # Excercise the JDK 11 built annotation processor using the selected JDK:
      # 1. Run all tests
      - run: ./mvnw -B -V surefire:test
      # 2. Compile examples
      - run: ./mvnw -B -V clean test -pl example -Dfmt.skip=true
      # 3. Compile and run tests
      - run: ./mvnw -B -V clean test -pl test -Dfmt.skip=true

  # amd64 / x86-64
  test-jdk:
    parameters:
      jdk:
        type: string
    docker:
      - image: << parameters.jdk >>
    environment:
      # Neutralize the MAVEN_CONFIG env set in maven images
      # https://github.com/carlossg/docker-maven/blob/master/amazoncorretto-17/Dockerfile#L20
      MAVEN_CONFIG: ""
    steps: *test-jdk-steps

  # aarch64 / arm64
  test-jdk-aarch64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps: *test-jdk-steps

  jackson-it:
    parallelism: 4
    docker:
      - image: cimg/openjdk:11.0.12
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - maven-repo-v3-{{ .Branch }}-{{ checksum "pom.xml" }}
            - maven-repo-v3-{{ .Branch }}-
            - maven-repo-v3-
      - run:
          name: Install artifacts
          command: ./mvnw -B -V install -DskipTests -Dgpg.skip=true -Dmaven.javadoc.skip=true
      - run:
          name: Test Jackson Versions
          command: ./jackson-it.sh

workflows:
  version: 2
  build_test:
    jobs:
      - build
      - test-release
      - jackson-it:
          requires: [build]
      - test-jdk:
          requires: [build]
          name: 8 - Adoptium
          jdk: "cimg/openjdk:8.0.302"
      - test-jdk:
          requires: [build]
          name: 11 - Adoptium
          jdk: "cimg/openjdk:11.0.12"
      - test-jdk:
          requires: [build]
          name: 15 - Adoptium
          jdk: "cimg/openjdk:15.0.2"
      - test-jdk:
          requires: [build]
          name: 17 - Adoptium
          jdk: "cimg/openjdk:17.0.0"

      - test-jdk-aarch64:
          requires: [build]
          name: 11 - Adoptium - Aarch64
          pre-steps:
            - run: |
                export DEBIAN_FRONTEND=noninteractive
                sudo -E apt-get update
                sudo -E apt-get install -qq openjdk-11-jdk-headless
                sudo update-alternatives --auto java
                sudo update-alternatives --auto javac
      - test-jdk-aarch64:
          requires: [build]
          name: 17 - Adoptium - Aarch64
          pre-steps:
            - run: |
                export DEBIAN_FRONTEND=noninteractive
                sudo -E apt-get update
                sudo -E apt-get install -qq openjdk-17-jdk-headless
                sudo update-alternatives --auto java
                sudo update-alternatives --auto javac
      - test-jdk:
          requires: [build]
          name: 8 - Amazon Corretto
          jdk: "maven:3.8.3-amazoncorretto-8"
      - test-jdk:
          requires: [build]
          name: 11 - Amazon Corretto
          jdk: "maven:3.8.3-amazoncorretto-11"
      - test-jdk:
          requires: [build]
          name: 17 - Amazon Corretto
          jdk: "maven:3.8.3-amazoncorretto-17"

      - test-jdk:
          requires: [build]
          name: 11 - Azul Zulu
          jdk: "azul/zulu-openjdk:11"
      - test-jdk:
          requires: [build]
          name: 17 - Azul Zulu
          jdk: "azul/zulu-openjdk:17"

      - test-jdk:
          requires: [build]
          name: 11 - GraalVM CE
          jdk: "ghcr.io/graalvm/graalvm-ce:java11-21"
      - test-jdk:
          requires: [build]
          name: 17 - GraalVM CE
          jdk: "ghcr.io/graalvm/graalvm-ce:java17-21"
